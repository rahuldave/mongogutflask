// Generated by CoffeeScript 1.6.1
(function() {
  var $, dropdown_submit, dropdown_submit_with_cb, h, info_layout, inline_list, one_col_table, one_col_table_partial, one_submit, one_submit_with_cb, regular_list, root, table_from_dict, table_from_dict_partial;

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  $ = jQuery;

  console.log("In Funcs");

  h = teacup;

  inline_list = h.renderable(function(items) {
    return h.ul('.inline', function() {
      var i, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = items.length; _i < _len; _i++) {
        i = items[_i];
        _results.push(h.li(i));
      }
      return _results;
    });
  });

  regular_list = h.renderable(function(items) {
    return h.ul('.regular', function() {
      var i, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = items.length; _i < _len; _i++) {
        i = items[_i];
        _results.push(h.li(i));
      }
      return _results;
    });
  });

  table_from_dict_partial = h.renderable(function(k, v) {
    h.td(k);
    return h.td(v);
  });

  table_from_dict = h.renderable(function(kcol, vcol, dict_or_vlist, vmode) {
    if (vmode == null) {
      vmode = false;
    }
    return h.table('.table.table-bordered.table-condensed.table-striped', function() {
      h.thead(function() {
        return h.tr(function() {
          h.th(kcol);
          return h.th(vcol);
        });
      });
      return h.tbody(function() {
        var k, v, _i, _len, _results, _results1;
        if (vmode) {
          _results = [];
          for (_i = 0, _len = dict_or_vlist.length; _i < _len; _i++) {
            v = dict_or_vlist[_i];
            _results.push(v);
          }
          return _results;
        } else {
          _results1 = [];
          for (k in dict_or_vlist) {
            v = dict_or_vlist[k];
            _results1.push(h.tr(function() {
              return table_from_dict_partial(k, v);
            }));
          }
          return _results1;
        }
      });
    });
  });

  one_col_table_partial = h.renderable(function(k) {
    return h.td(k);
  });

  one_col_table = h.renderable(function(kcol, tlist_or_vlist, vmode) {
    if (vmode == null) {
      vmode = false;
    }
    return h.table('.table.table-bordered.table-condensed', function() {
      h.thead(function() {
        return h.tr(function() {
          return h.th(kcol);
        });
      });
      return h.tbody(function() {
        var v, _i, _len, _results;
        if (vmode) {
          _results = [];
          for (_i = 0, _len = tlist_or_vlist.length; _i < _len; _i++) {
            v = tlist_or_vlist[_i];
            _results.push(v);
          }
          return _results;
        } else {
          return h.tr(function() {
            var k, _j, _len1, _results1;
            _results1 = [];
            for (_j = 0, _len1 = tlist_or_vlist.length; _j < _len1; _j++) {
              k = tlist_or_vlist[_j];
              _results1.push(one_col_table_partial(k));
            }
            return _results1;
          });
        }
      });
    });
  });

  one_submit = h.renderable(function(ltext, btext) {
    h.label(ltext);
    return h.form(".form-inline", function() {
      h.input(".span3", {
        type: 'text'
      });
      return h.button(".btn", {
        type: 'button'
      }, btext);
    });
  });

  one_submit_with_cb = h.renderable(function(ltext, btext, ctext) {
    h.label(ltext);
    return h.form(".form-inline", function() {
      h.input(".span3", {
        type: 'text'
      });
      h.label('.checkbox', function() {
        h.input({
          type: 'checkbox'
        });
        return h.text(ctext);
      });
      return h.button(".btn", {
        type: 'button'
      }, btext);
    });
  });

  dropdown_submit = h.renderable(function(selects, ltext, btext) {
    h.label(ltext);
    return h.form('##{wname}.form-inline', function() {
      h.select(function() {
        var s, _i, _len, _results;
        _results = [];
        for (_i = 0, _len = selects.length; _i < _len; _i++) {
          s = selects[_i];
          _results.push(h.option(s));
        }
        return _results;
      });
      return h.button(".btn", {
        type: 'button'
      }, btext);
    });
  });

  dropdown_submit_with_cb = h.renderable(function(selects, ltext, btext, ctext) {
    h.label(ltext);
    return h.form('.form-inline', function() {
      h.select(function() {
        var s, _i, _len, _results;
        _results = [];
        for (_i = 0, _len = selects.length; _i < _len; _i++) {
          s = selects[_i];
          _results.push(h.option(s));
        }
        return _results;
      });
      h.label('.checkbox', function() {
        h.input({
          type: 'checkbox'
        });
        return h.text(ctext);
      });
      return h.button(".btn", {
        type: 'button'
      }, btext);
    });
  });

  info_layout = h.renderable(function(dict, keysdict) {
    return h.dl('.dl-horizontal', function() {
      var k, _results;
      _results = [];
      for (k in keysdict) {
        h.dt(keysdict[k]);
        _results.push(h.dd(dict[k]));
      }
      return _results;
    });
  });

  root.widgets = {
    inline_list: inline_list,
    regular_list: regular_list,
    info_layout: info_layout,
    one_col_table_partial: one_col_table_partial,
    table_from_dict_partial: table_from_dict_partial,
    one_col_table: one_col_table,
    table_from_dict: table_from_dict,
    one_submit: one_submit,
    dropdown_submit: dropdown_submit,
    one_submit_with_cb: one_submit_with_cb,
    dropdown_submit_with_cb: dropdown_submit_with_cb
  };

}).call(this);
