// Generated by CoffeeScript 1.6.1
(function() {
  var $, AddGroup, InviteUser, add_libs_and_groups, dd, dl, dt, format_items, format_notes_for_item, format_postings_for_item, format_tags, format_tags_for_item, get_taggings, get_tags, group_info_template, li, library_info_template, postable_info, postable_info_layout, postable_inviteds, postable_inviteds_template, renderable, root, ul, w,
    __hasProp = {}.hasOwnProperty,
    _this = this,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  $ = jQuery;

  console.log("In Funcs");

  renderable = teacup.renderable, ul = teacup.ul, li = teacup.li, dl = teacup.dl, dt = teacup.dt, dd = teacup.dd;

  w = widgets;

  format_tags = function(tagtype, $sel, tags, tagqkey) {
    var htmlstring, k, nonqloc, t, url, urla, v, _i, _len, _ref;
    htmlstring = "<li class=\"nav-header\">" + tagtype + "</li>";
    for (_i = 0, _len = tags.length; _i < _len; _i++) {
      _ref = tags[_i], k = _ref[0], v = _ref[1];
      if (tagqkey === 'stags') {
        t = v[0];
      } else if (tagqkey === 'tagname') {
        t = k;
      } else {
        t = "CRAP";
      }
      nonqloc = document.location.href.split('?')[0];
      if (tagqkey === 'tagname') {
        url = nonqloc + ("?query=tagtype:" + tagtype + "&query=" + tagqkey + ":" + t);
        urla = document.location + ("&query=tagtype:" + tagtype + "&query=" + tagqkey + ":" + t);
        if (nonqloc === document.location.href) {
          urla = document.location + ("?query=tagtype:" + tagtype + "&query=" + tagqkey + ":" + t);
        }
      } else {
        url = nonqloc + ("?query=" + tagqkey + ":" + t);
        urla = document.location + ("&query=" + tagqkey + ":" + t);
        if (nonqloc === document.location.href) {
          urla = document.location + ("?query=" + tagqkey + ":" + t);
        }
      }
      htmlstring = htmlstring + ("<li><span><a href=\"" + url + "\">" + k + "</a>&nbsp;<a href=\"" + urla + "\">(+)</a></span></li>");
    }
    return $sel.html(htmlstring);
  };

  format_notes_for_item = function(fqin, notes) {
    var t, t3list;
    t3list = (function() {
      var _i, _len, _ref, _results;
      _ref = notes[fqin];
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        t = _ref[_i];
        _results.push("<span>" + t + "</span><br/>");
      }
      return _results;
    })();
    if (t3list.length > 0) {
      return "<p>Notes:<br/>" + t3list.join("<br/>") + "</p>";
    } else {
      return "";
    }
  };

  format_tags_for_item = function(fqin, stags, nick) {
    var t, t2list;
    t2list = (function() {
      var _i, _len, _ref, _results;
      _ref = stags[fqin];
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        t = _ref[_i];
        _results.push("<a href=\"/postable/" + nick + "/group:default/filter/html?query=tagname:" + t[0] + "&query=tagtype:" + t[1] + "\">" + t[0] + "</a>");
      }
      return _results;
    })();
    if (t2list.length > 0) {
      return "<span>Tagged as " + t2list.join(", ") + "</span><br/>";
    } else {
      return "";
    }
  };

  format_postings_for_item = function(fqin, postings, nick) {
    var p, p2list;
    p2list = (function() {
      var _i, _len, _ref, _results;
      _ref = postings[fqin];
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        p = _ref[_i];
        if (p !== ("" + nick + "/group:default")) {
          _results.push("<a href=\"/postable/" + p + "/filter/html\">" + p + "</a>");
        }
      }
      return _results;
    })();
    if (p2list.length > 0) {
      return "<span>Posted in " + p2list.join(", ") + "</span><br/>";
    } else {
      return "";
    }
  };

  format_items = function($sel, nick, items, count, stags, notes, postings, formatter, asform) {
    var adslocation, fqin, htmlstring, i, url, _i, _len;
    if (asform == null) {
      asform = false;
    }
    adslocation = "http://labs.adsabs.harvard.edu/adsabs/abs/";
    htmlstring = "";
    for (_i = 0, _len = items.length; _i < _len; _i++) {
      i = items[_i];
      fqin = i.basic.fqin;
      url = adslocation + ("" + i.basic.name);
      htmlstring = htmlstring + ("<" + formatter + "><a href=\"" + url + "\">" + i.basic.name + "</a><br/>");
      htmlstring = htmlstring + format_tags_for_item(fqin, stags, nick);
      htmlstring = htmlstring + format_postings_for_item(fqin, postings, nick);
      htmlstring = htmlstring + format_notes_for_item(fqin, notes, nick);
      htmlstring = htmlstring + ("</" + formatter + ">");
      if (asform) {
        htmlstring = htmlstring + w.postalnote_form();
      }
      $sel.prepend(htmlstring);
    }
    return $('#breadcrumb').append("" + count + " items");
  };

  get_tags = function(tags, tqtype) {
    var fqtn, k, name, t, tdict, type, user, v, _i, _len;
    console.log("TAGS", tags);
    tdict = {};
    if (tqtype === 'stags') {
      return (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = tags.length; _i < _len; _i++) {
          t = tags[_i];
          _results.push([t[3], [t[0]]]);
        }
        return _results;
      })();
    }
    for (_i = 0, _len = tags.length; _i < _len; _i++) {
      t = tags[_i];
      fqtn = t[0], user = t[1], type = t[2], name = t[3];
      if (tdict[name] === void 0) {
        tdict[name] = [];
      }
      tdict[name].push(fqtn);
    }
    if (tqtype === 'tagname') {
      return (function() {
        var _results;
        _results = [];
        for (k in tdict) {
          if (!__hasProp.call(tdict, k)) continue;
          v = tdict[k];
          _results.push([k, v]);
        }
        return _results;
      })();
    }
    return [];
  };

  get_taggings = function(data) {
    var e, k, notes, stags, v, _ref;
    stags = {};
    notes = {};
    _ref = data.taggings;
    for (k in _ref) {
      if (!__hasProp.call(_ref, k)) continue;
      v = _ref[k];
      if (v[0] > 0) {
        stags[k] = (function() {
          var _i, _len, _ref1, _results;
          _ref1 = v[1];
          _results = [];
          for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
            e = _ref1[_i];
            if (e.thething.tagtype === "ads/tagtype:tag") {
              _results.push([e.thething.tagname, e.thething.tagtype]);
            }
          }
          return _results;
        })();
        notes[k] = (function() {
          var _i, _len, _ref1, _results;
          _ref1 = v[1];
          _results = [];
          for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
            e = _ref1[_i];
            if (e.thething.tagtype === "ads/tagtype:note") {
              _results.push(e.thething.tagdescription);
            }
          }
          return _results;
        })();
      } else {
        stags[k] = [];
        notes[k] = [];
      }
    }
    return [stags, notes];
  };

  add_libs_and_groups = function($libsel, $groupsel, nick) {
    $.get("/user/" + nick + "/groupsuserisin", function(data) {
      return $groupsel.append("<span> (in " + (data.groups.join(',')) + ")</span>");
    });
    return $.get("/user/" + nick + "/librariesuserisin", function(data) {
      return $libsel.append("<span> (in " + (data.libraries.join(',')) + ")</span>");
    });
  };

  postable_inviteds_template = renderable(function(fqpn, users, scmode) {
    var k, userlist, v;
    if (scmode == null) {
      scmode = false;
    }
    if (scmode) {
      userlist = (function() {
        var _results;
        _results = [];
        for (k in users) {
          v = users[k];
          _results.push(k);
        }
        return _results;
      })();
      return w.one_col_table("Users", userlist);
    } else {
      return w.table_from_dict("User", "Can User Write", users);
    }
  });

  postable_inviteds = function(fqpn, data, template, scmode) {
    if (scmode == null) {
      scmode = false;
    }
    return template(fqpn, data.users, scmode);
  };

  postable_info_layout = renderable(function(_arg) {
    var basic, owner;
    basic = _arg.basic, owner = _arg.owner;
    return dl('.dl-horizontal', function() {
      dt("Description");
      dd(basic.description);
      dt("Owner");
      dd(owner);
      dt("Creator");
      dd(basic.creator);
      dt("Created on");
      return dd(basic.whencreated);
    });
  });

  library_info_template = renderable(function(data) {
    return postable_info_layout(data.library);
  });

  group_info_template = renderable(function(data) {
    return postable_info_layout(data.group);
  });

  postable_info = function(data, template) {
    return template(data);
  };

  InviteUser = (function(_super) {

    __extends(InviteUser, _super);

    function InviteUser() {
      var _this = this;
      this.inviteUserEH = function() {
        return InviteUser.prototype.inviteUserEH.apply(_this, arguments);
      };
      this.render = function() {
        return InviteUser.prototype.render.apply(_this, arguments);
      };
      return InviteUser.__super__.constructor.apply(this, arguments);
    }

    InviteUser.prototype.tagName = 'div';

    InviteUser.prototype.events = {
      "click .sub": "inviteUserEH"
    };

    InviteUser.prototype.initialize = function(options) {
      this.withcb = options.withcb, this.postable = options.postable;
      if (this.withcb) {
        return this.content = widgets.one_submit_with_cb("Invite a user using their email:", "Invite", "Can Post?");
      } else {
        return this.content = widgets.one_submit("Invite a user using their email:", "Invite");
      }
    };

    InviteUser.prototype.render = function() {
      this.$el.html(this.content);
      return this;
    };

    InviteUser.prototype.inviteUserEH = function() {
      var cback, changerw, eback, loc, rwmode, usernick;
      loc = window.location;
      cback = function(data) {
        console.log("return data", data, loc);
        return window.location = location;
      };
      eback = function(xhr, etext) {
        console.log("ERROR", etext, loc);
        return alert("Did not succeed: " + etext);
      };
      console.log("GGG", this.$el);
      changerw = false;
      if (this.withcb) {
        rwmode = this.$('.cb').is(':checked');
        if (rwmode) {
          changerw = true;
        } else {
          changerw = false;
        }
      }
      usernick = this.$('.txt').val();
      return syncs.invite_user("adsgut/user:" + usernick, this.postable, changerw, cback, eback);
    };

    return InviteUser;

  })(Backbone.View);

  AddGroup = (function(_super) {

    __extends(AddGroup, _super);

    function AddGroup() {
      var _this = this;
      this.addGroupEH = function() {
        return AddGroup.prototype.addGroupEH.apply(_this, arguments);
      };
      this.render = function() {
        return AddGroup.prototype.render.apply(_this, arguments);
      };
      return AddGroup.__super__.constructor.apply(this, arguments);
    }

    AddGroup.prototype.tagName = 'div';

    AddGroup.prototype.events = {
      "click .sub": "addGroupEH"
    };

    AddGroup.prototype.initialize = function(options) {
      this.withcb = options.withcb, this.postable = options.postable, this.groups = options.groups;
      if (this.withcb) {
        return this.content = widgets.dropdown_submit_with_cb(this.groups, "Add a group you are a member of:", "Add", "Can Post?");
      } else {
        return this.content = widgets.dropdown_submit(this.groups, "Add a group you are a member of:", "Add");
      }
    };

    AddGroup.prototype.render = function() {
      this.$el.html(this.content);
      return this;
    };

    AddGroup.prototype.addGroupEH = function() {
      var cback, changerw, eback, groupchosen, loc, rwmode;
      loc = window.location;
      cback = function(data) {
        console.log("return data", data, loc);
        return window.location = location;
      };
      eback = function(xhr, etext) {
        console.log("ERROR", etext, loc);
        return alert("Did not succeed: " + etext);
      };
      console.log("GGG", this.$el);
      changerw = false;
      if (this.withcb) {
        rwmode = this.$('.cb').is(':checked');
        if (rwmode) {
          changerw = true;
        } else {
          changerw = false;
        }
      }
      groupchosen = this.$('.sel').val();
      console.log("GC", groupchosen);
      return syncs.add_group(groupchosen, this.postable, changerw, cback, eback);
    };

    return AddGroup;

  })(Backbone.View);

  root.get_tags = get_tags;

  root.get_taggings = get_taggings;

  root.format_items = format_items;

  root.format_tags = format_tags;

  root.add_libs_and_groups = add_libs_and_groups;

  root.views = {
    library_info: postable_info,
    group_info: postable_info,
    postable_inviteds: postable_inviteds,
    InviteUser: InviteUser,
    AddGroup: AddGroup
  };

  root.templates = {
    library_info: library_info_template,
    group_info: group_info_template,
    postable_inviteds: postable_inviteds_template
  };

}).call(this);
